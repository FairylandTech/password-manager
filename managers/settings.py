"""
Django settings for managers project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

from fairylandfuture.utils.journal import journal

from utils.config import DataSourceConfig, ProjectConfig, CacheConfig
from utils.exceptions import DataSourceError, CacheError
from bin.datasource import DataSourceBin

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
CONFIG_DIR = os.path.join(BASE_DIR, "conf")

PROJECT_CONFIG = ProjectConfig(os.path.join(BASE_DIR, ".env"))
RUN_ENV = PROJECT_CONFIG.environment
DATA_SOURCE_ENGINE = PROJECT_CONFIG.datasource_engine
CACHE_ENGINE = PROJECT_CONFIG.cache_engine
LOG_LEVEL = PROJECT_CONFIG.log_level

DATA_SOURCE_CONFIG = DataSourceConfig(DATA_SOURCE_ENGINE, RUN_ENV, CONFIG_DIR).config
CACHE_CONFIG = CacheConfig(CACHE_ENGINE, RUN_ENV, CONFIG_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-6wkly!xq*o@gnmo_mmw@3fb7u3ejqqb*a9@+w9yd@$$vg&q%h="

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = PROJECT_CONFIG.debug

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = PROJECT_CONFIG.allowed_hosts

# Application definition

INSTALLED_APPS = [
    # Admin UI
    "simpleui",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # framework
    "rest_framework",
    # "django_filters",
    # "corsheaders",
    # cache
    "django_redis",
    # apps
    "apps.example",
    "apps.rbac",
    "apps.account",
]

MIDDLEWARE = [
    # cache
    "django.middleware.cache.UpdateCacheMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # cache
    # "django.middleware.cache.FetchFromCacheMiddleware",
]

ROOT_URLCONF = "managers.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "managers.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

if DATA_SOURCE_ENGINE == "mysql":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "HOST": DATA_SOURCE_CONFIG.get("host"),
            "PORT": DATA_SOURCE_CONFIG.get("port"),
            "USER": DATA_SOURCE_CONFIG.get("username"),
            "PASSWORD": DATA_SOURCE_CONFIG.get("password"),
            "NAME": DATA_SOURCE_CONFIG.get("database"),
            "CHARSET": DATA_SOURCE_CONFIG.get("charset"),
        }
    }
    DataSourceBin.process()
if DATA_SOURCE_ENGINE == "postgresql":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "HOST": DATA_SOURCE_CONFIG.get("host"),
            "PORT": DATA_SOURCE_CONFIG.get("port"),
            "USER": DATA_SOURCE_CONFIG.get("username"),
            "PASSWORD": DATA_SOURCE_CONFIG.get("password"),
            "NAME": DATA_SOURCE_CONFIG.get("database"),
            # "OPTIONS": {
            #     "options": f"-c search_path={DATA_SOURCE_CONFIG.get('schema') if DATA_SOURCE_CONFIG.get('schema') else 'public'}",
            # },
        }
    }
else:
    raise DataSourceError("Unsupported datasource engine")

if CACHE_ENGINE == "redis":
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": CACHE_CONFIG.redis_url,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": CACHE_CONFIG.config.get("password"),
                "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            },
        }
    }
else:
    raise CacheError("Unsupported cache engine")

# CACHE_MIDDLEWARE_ALIAS = "default"
# CACHE_MIDDLEWARE_SECONDS = 60 * 60
# CACHE_MIDDLEWARE_KEY_PREFIX = "password_mamager"

SESSION_CACHE_ALIAS = "default"
SESSION_ENGINE = "django.contrib.sessions.backends.cache"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# LANGUAGE_CODE = "en-us"
LANGUAGE_CODE = PROJECT_CONFIG.language_code

# TIME_ZONE = "UTC"
TIME_ZONE = PROJECT_CONFIG.time_zone

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "journal": {
            "level": LOG_LEVEL,
            "class": "utils.journal.JournalHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["journal"],
            "level": LOG_LEVEL,
            "propagate": True,
        },
    },
}
